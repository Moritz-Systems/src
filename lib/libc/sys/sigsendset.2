.\"	$NetBSD$
.\"
.\" Copyright (c) 2020 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to The NetBSD Foundation
.\" by Kamil Rytarowski.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd June 16, 2020
.Dt SIGSENDSET 2
.Os
.Sh NAME
.Nm sigsend ,
.Nm sigsendset
.Nd send signal to a process or a group of processes
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In sys/types.h
.In signal.h
.In sys/procset.h
.Ft int
.Fn sigsend "idtype_t idtype" "id_t id" "int sig"
.Ft int
.Fn sigsendset "const procset_t *psp" "int sig"
.Fn setprocset "&ps" "op" "ltype" "lid" "rtype" "rid"
.Sh DESCRIPTION
The
.Fn sigsend
function sends the signal given by
.Fa sig
to a process or a group of processes specified by
.Fa idtype
and
.Fa id .
.Fa sig
may be one of the signals specified in
.Xr sigaction 2
or it may be 0, in which case
error checking is performed but no
signal is actually sent.
This can be used to check the validity of
.Fa pid .
.Pp
For a process to have permission to send a signal to a process designated
by
.Fa pid ,
the real or effective user ID of the receiving process must match
that of the sending process or the user must have appropriate privileges
(such as given by a set-user-ID program or the user is the super-user).
A single exception is the signal SIGCONT, which may always be sent
to any descendant of the current process.
.Pp
The set of processes to be signaled is specified by the arguments
.Fa idtype
and
.Fa id .
The separate
.Fa idtype
and
.Fa id
arguments support many other types of
identifiers in addition to process IDs and process group IDs.
.Bl -bullet -offset indent
.It
If
.Fa idtype
is
.Dv P_PID ,
.Fn sigsend
sends a signal to a process with a process ID equal to
.Dv (pid_t)id .
.It
If
.Fa idtype
is
.Dv P_PGID ,
.Fn sigsend
sends a signal to a process with a process group ID equal to
.Dv (pid_t)id .
.It
If
.Fa idtype
is
.Dv P_ALL ,
.Fn sigsend
sends a signal to all processes and the
.Dv id
is ignored.
.It
If
.Fa idtype
is
.Dv P_PID
or
.Dv P_PGID
and the
.Dv id
is zero,
.Fn sigsend
sends a signal to any child process in the same process group as the caller.
.El
.Pp
Non-standard identifier types supported by this
implementation are:
.Bl -tag -width P_JAILID
.It Dv P_UID
Signal processes whose effective user ID is equal to
.Dv (uid_t) Fa id .
.It Dv P_GID
Signal processes whose effective group ID is equal to
.Dv (gid_t) Fa id .
.It Dv P_SID
Signal processes whose session ID is equal to
.Fa id .
.\" This is just how sessions work, not sure this needs to be documented here
If the child process started its own session,
its session ID will be the same as its process ID.
Otherwise the session ID of a child process will match the caller's session ID.
.El
.Pp
If
.Fa id
is equal to
.Dv P_MYID ,
the value of
.Fa id
is retrieved from the calling process.
.Pp
The process with ID of 0 is always excluded and the process with process ID of 1
excluded unless
.Fa idtype
is equal to
.Dv P_PID .
.Pp
If
.Fa sig
is equal to
.Dv 0 ,
then no signal is sent to the process ID or process group ID, but error
checking is performed.
This can be used to check if the process ID or process group ID exist.
.Pp
.Fn sigsendset
is a alternative interface of
.Fn sigsend
that sends the signal given by
.Fa sig
to a process or a group of processes specified by
.Fa psp .
.Fa psp is a pointer to the
.Dv procset_t
structure, which is defined as:
.Bd -literal
typedef struct procset {
        idop_t p_op;            /* the operator connecting the left
                                 * and the right operand */
        idtype_t p_lidtype;     /* the left operand id type */
        id_t p_lid;             /* the left operand id */
        idtype_t p_ridtype;     /* the right operand id type */
        id_t p_rid;             /* the right operand id */
} procset_t;
.Ed
.Pp
The fields of
.Dv procset_t
are:
.Bl -tag -width XXXp_lidtype -offset p_lidtype
.It p_op
The operator connecting the left and the right operand.
.It p_lidtype
The left operand id type.
.It p_lid
The left operand id.
.It p_ridtype
The right operand id type.
.It p_rid
The right operand id.
.El
.Pp
The
.Dv p_op
field can contain one of the following values:
.Bl -tag -width XXXPOP_DIFF -offset indent
.It POP_AND
Process is in both the left set and the right set.
.It POP_OR
Process is in the left set or the right set or both.
.It POP_XOR
Process is in the left set or the right set but not both.
.It POP_DIFF
Process is in the left set and not in the right set.
.El
.Pp
.Fn setprocset
is a macro which is provided for ease of initializing a
.Dv procset
structure.
This macro does not evaluate its parameters multiple times.

+       POP_AND,        /* process is in both the left set and the right set */
+       POP_OR,         /* process is in the left set or the right set or both */
+       POP_XOR,        /* process is in the left set or the right set but not both */
+       POP_DIFF,       /* process is in the left set and not in the right set */

.Sh RETURN VALUES
Upon successful completion of
.Fn sigsend
and
.Fn sigsendset ,
a value of 0 is returned.
Otherwise, a value of \-1 is returned and
.Va errno
is set to indicate the error.
.Sh ERRORS
.Fn kill
will fail and no signal will be sent if:
.Bl -tag -width Er
.It Bq Er EINVAL
.Fa sig
is not a valid signal number or
.Fa idtype
is not a valid
.Dv idtype field.
.It Bq Er EPERM
The sending process is not the super-user and its effective
user id does not match the effective user-id of the receiving process.
When signaling a process group, this error is returned if any members
of the group could not be signaled.
.It Bq Er ESRCH
No process can be found corresponding to that specified by
.Fa pid ;
or the process id was given as 0
but the sending process does not have a process group.
.El
.Pp
In addition,
.Fn sigsendset
will fail and return immediately if:
.Bl -tag -width Er
.It Bq Er EFAULT
The
.Fa idtype
argument point to an illegal address.
.El
.Sh SEE ALSO
.Xr getpgrp 2 ,
.Xr getpid 2 ,
.Xr kill 2 ,
.Xr sigaction 2 ,
.Xr killpg 3 ,
.Xr signal 7
.Sh STANDARDS
The
.Fn sigsendset
and
.Fn setprocset
originated with System V.
.Pp
.Fn setprocset
is an extension originated in SunOS.
.Sh HISTORY
.Fn sigsend ,
.Fn sigsendset
and
.Fn setprocset
first appeared in
.Nx 10 .
.Sh AUTHORS
.An Kamil Rytarowski Aq Mt kamil@netbsd.org
